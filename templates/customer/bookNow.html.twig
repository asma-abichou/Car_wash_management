{% extends 'base.html.twig' %}

{% block title %}Reservation{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="#">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
{% endblock %}
{% block body %}

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card mt-5">
                    <div class="card-header bg-primary text-white">
                        <h1 class="card-title">Coordonnées GPS</h1>
                    </div>
                    <div class="card-body">
                        <button id="find-location" class="btn btn-primary mb-3">Use My Location</button>
                        <form id="location-form" class="form-horizontal">
                            <div class="form-group row">
                                <label for="address" class="col-sm-3 col-form-label">Adresse :</label>
                                <div class="col-sm-9">
                                    <input type="text" id="address" name="address" autocomplete="address" class="form-control" required>
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="col-sm-9 offset-sm-3">
                                    <button type="submit" class="btn btn-primary">Génerer</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="card mt-3">
                    <div class="card-body">
                        <div id="map" style="width: 100%; height: 500px;"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
        <!-- Add the Google Maps API script -->
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBImnElUtRCnC-Q1jL0a0zJAmGAPzs5GGc&libraries=places"></script>
        <script>
            let map;
            let service;
            let infowindow;

            document.getElementById('find-location').addEventListener('click', function() {
                getLocation();
            });

            document.getElementById('location-form').addEventListener('submit', function(event) {
                event.preventDefault();
                const address = document.getElementById('address').value;
                geocodeAddress(address);
            });

            function initMap() {
                const initialLocation = { lat: -33.8688, lng: 151.2195 }; // Default location (Sydney)
                map = new google.maps.Map(document.getElementById('map'), {
                    center: initialLocation,
                    zoom: 15
                });
                infowindow = new google.maps.InfoWindow();
            }

            function getLocation() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(showPosition, showError);
                } else {
                    alert('Geolocation is not supported by this browser.');
                }
            }

            function showPosition(position) {
                const userLocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                map.setCenter(userLocation);
                findNearbyCarWashes(userLocation);
            }

            function showError(error) {
                switch (error.code) {
                    case error.PERMISSION_DENIED:
                        alert('User denied the request for Geolocation.');
                        break;
                    case error.POSITION_UNAVAILABLE:
                        alert('Location information is unavailable.');
                        break;
                    case error.TIMEOUT:
                        alert('The request to get user location timed out.');
                        break;
                    case error.UNKNOWN_ERROR:
                        alert('An unknown error occurred.');
                        break;
                }
            }

            function geocodeAddress(address) {
                const geocoder = new google.maps.Geocoder();
                geocoder.geocode({ 'address': address }, function(results, status) {
                    if (status === 'OK') {
                        map.setCenter(results[0].geometry.location);
                        const userLocation = results[0].geometry.location;
                        findNearbyCarWashes(userLocation);
                    } else {
                        alert('Geocode was not successful for the following reason: ' + status);
                    }
                });
            }

            function findNearbyCarWashes(location) {
                const request = {
                    location: location,
                    radius: '5000', // Search within 5 km radius
                    type: ['car_wash']
                };
                service = new google.maps.places.PlacesService(map);
                service.nearbySearch(request, function(results, status) {
                    if (status === google.maps.places.PlacesServiceStatus.OK) {
                        for (let i = 0; i < results.length; i++) {
                            createMarker(results[i]);
                        }
                    }
                });
            }

            function createMarker(place) {
                const placeLoc = place.geometry.location;
                const marker = new google.maps.Marker({
                    map: map,
                    position: placeLoc
                });

                google.maps.event.addListener(marker, 'click', function() {
                    infowindow.setContent(place.name);
                    infowindow.open(map, this);
                });
            }

            // Initialize the map on page load
            window.onload = initMap;
        </script>

{% endblock %}